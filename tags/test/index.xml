<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on 华彬闳的Blog</title>
    <link>https://ooneko.github.io/tags/test/</link>
    <description>Recent content in test on 华彬闳的Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Mar 2019 17:42:50 +0000</lastBuildDate>
    
	<atom:link href="https://ooneko.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何测试&#34;无限循环&#34;的代码</title>
      <link>https://ooneko.github.io/posts/2019-03-05-howto-test-infinite-loop/</link>
      <pubDate>Tue, 05 Mar 2019 17:42:50 +0000</pubDate>
      
      <guid>https://ooneko.github.io/posts/2019-03-05-howto-test-infinite-loop/</guid>
      <description>在写 python 有时会遇到一些”无限循环“的代码需要测试，比如一个持续监控某个api状态的线程。很有可能会写成这样:
def watch(self): while self.running: do_something() ...  这样的话，单元测试写起来就比较奇怪了。最先想到的是把其中某个函数mock掉，通过side_effect 返回一个exception 来结束测试。
class TestCase(unittest.TestCase): def test_watch(self): do_something = mock.Mock() do_something.side_effect = [&#39;some_valuable_info&#39;, Exception] self.assertRaises(Exception, do_something)  有没有更好的方法呢？ 有.
把退出条件放到一个方法里面去，在测试的时候，通过mock掉这个方法，来达到退出条件。
def is_running(self): return self.running def watch(self): while self.is_running(): do_something() ...  这样测试起来就容易多了, 当第一次运行时，调到的is_running 是True，第二次运行调用到is_running 的时候就会退出测试。
class TestCase(unittest.TestCase): def test_watch(self): mock_is_running = mock.Mock() mock_is_running.side_effect = [True, False] watch() ...  总结一下： 几乎没有真正的‘无限循环’代码，找出它的退出条件，然后重构代码。</description>
    </item>
    
  </channel>
</rss>